{"ast":null,"code":"import { GET_PERSONAJES_REQUEST, GET_PERSONAJES_SUCCESS, GET_PERSONAJES_FAIL, SET_PERSONAJES, FILTER_PERSONAJE } from '../constants/page';\n\nfunction setPersonajes(data) {\n  var personajes = data.results.map(function (personaje) {\n    var url = personaje.url;\n    personaje.id = url.substring(34, url.length - 1);\n    personaje.name = perosonaje.name.charAt(0).toUpperCase() + personaje.name.slice(1);\n    return perosonaje;\n  });\n  return {\n    type: SET_PERSONAJES,\n    payload: personajes\n  };\n}\n\nexport function getPersonajes() {\n  return function (dispatch) {\n    dispatch({\n      type: GET_PERSONAJES_REQUEST\n    });\n    return fetch(\"https://rickandmortyapi.com/api/character/\").then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"\".concat(response.status, \": \").concat(response.statusText));\n    }).then(function (data) {\n      dispatch({\n        type: GET_PERSONAJES_SUCCESS\n      });\n      dispatch(setPersonajes(data));\n      dispatch(filterPersonajes());\n    }).catch(function (error) {\n      dispatch({\n        type: GET_PERSONAJES_FAIL,\n        payload: error.message\n      });\n    });\n  };\n}\nexport function filterPersonajes() {\n  var searchString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return function (dispatch, getState) {\n    var displayedPersonajes = getState().page.personajes.filter(function (personaje) {\n      return personaje.name.toLowerCase().includes(searchString.toLowerCase());\n    });\n    dispatch({\n      type: FILTER_PERSONAJE,\n      payload: displayedPersonajes\n    });\n  };\n}","map":{"version":3,"sources":["/home/cesar/Escritorio/miloV2/milotestmorty/src/redux/actions/page.js"],"names":["GET_PERSONAJES_REQUEST","GET_PERSONAJES_SUCCESS","GET_PERSONAJES_FAIL","SET_PERSONAJES","FILTER_PERSONAJE","setPersonajes","data","personajes","results","map","personaje","url","id","substring","length","name","perosonaje","charAt","toUpperCase","slice","type","payload","getPersonajes","dispatch","fetch","then","response","ok","json","Error","status","statusText","filterPersonajes","catch","error","message","searchString","getState","displayedPersonajes","page","filter","toLowerCase","includes"],"mappings":"AAAA,SACIA,sBADJ,EAEIC,sBAFJ,EAGIC,mBAHJ,EAIIC,cAJJ,EAKIC,gBALJ,QAMS,mBANT;;AAQE,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,UAAU,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiB,UAAAC,SAAS,EAAI;AAAA,QACzCC,GADyC,GACjCD,SADiC,CACzCC,GADyC;AAE/CD,IAAAA,SAAS,CAACE,EAAV,GAAeD,GAAG,CAACE,SAAJ,CAAc,EAAd,EAAkBF,GAAG,CAACG,MAAJ,GAAa,CAA/B,CAAf;AACAJ,IAAAA,SAAS,CAACK,IAAV,GAAiBC,UAAU,CAACD,IAAX,CAAgBE,MAAhB,CAAuB,CAAvB,EAA0BC,WAA1B,KAA0CR,SAAS,CAACK,IAAV,CAAeI,KAAf,CAAqB,CAArB,CAA3D;AACA,WAAOH,UAAP;AACD,GALkB,CAAnB;AAOA,SAAO;AACLI,IAAAA,IAAI,EAAEjB,cADD;AAELkB,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAID;;AAED,OAAO,SAASe,aAAT,GAAyB;AAC9B,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEpB;AADC,KAAD,CAAR;AAIA,WAAOwB,KAAK,8CAAL,CACJC,IADI,CACC,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,YAAM,IAAIC,KAAJ,WAAaH,QAAQ,CAACI,MAAtB,eAAiCJ,QAAQ,CAACK,UAA1C,EAAN;AACD,KAPI,EAQJN,IARI,CAQC,UAAAnB,IAAI,EAAI;AACZiB,MAAAA,QAAQ,CAAC;AACPH,QAAAA,IAAI,EAAEnB;AADC,OAAD,CAAR;AAGAsB,MAAAA,QAAQ,CAAClB,aAAa,CAACC,IAAD,CAAd,CAAR;AACAiB,MAAAA,QAAQ,CAACS,gBAAgB,EAAjB,CAAR;AACD,KAdI,EAeJC,KAfI,CAeE,UAAAC,KAAK,EAAI;AACdX,MAAAA,QAAQ,CAAC;AACPH,QAAAA,IAAI,EAAElB,mBADC;AAEPmB,QAAAA,OAAO,EAAEa,KAAK,CAACC;AAFR,OAAD,CAAR;AAID,KApBI,CAAP;AAqBD,GA1BD;AA2BD;AAED,OAAO,SAASH,gBAAT,GAA6C;AAAA,MAAnBI,YAAmB,uEAAJ,EAAI;AAClD,SAAO,UAACb,QAAD,EAAWc,QAAX,EAAwB;AAC7B,QAAMC,mBAAmB,GAAGD,QAAQ,GAAGE,IAAX,CAAgBhC,UAAhB,CAA2BiC,MAA3B,CAAkC,UAAA9B,SAAS,EAAI;AACzE,aAAOA,SAAS,CAACK,IAAV,CAAe0B,WAAf,GAA6BC,QAA7B,CAAsCN,YAAY,CAACK,WAAb,EAAtC,CAAP;AACD,KAF2B,CAA5B;AAIAlB,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEhB,gBADC;AAEPiB,MAAAA,OAAO,EAAEiB;AAFF,KAAD,CAAR;AAID,GATD;AAUD","sourcesContent":["import {\n    GET_PERSONAJES_REQUEST,\n    GET_PERSONAJES_SUCCESS,\n    GET_PERSONAJES_FAIL,\n    SET_PERSONAJES,\n    FILTER_PERSONAJE\n  } from '../constants/page'\n  \n  function setPersonajes(data) {\n    const personajes = data.results.map(personaje => {\n      let { url } = personaje\n      personaje.id = url.substring(34, url.length - 1)\n      personaje.name = perosonaje.name.charAt(0).toUpperCase() + personaje.name.slice(1)\n      return perosonaje\n    })\n  \n    return {\n      type: SET_PERSONAJES,\n      payload: personajes\n    }\n  }\n  \n  export function getPersonajes() {\n    return dispatch => {\n      dispatch({\n        type: GET_PERSONAJES_REQUEST\n      })\n  \n      return fetch(`https://rickandmortyapi.com/api/character/`)\n        .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n  \n          throw new Error(`${response.status}: ${response.statusText}`)\n        })\n        .then(data => {\n          dispatch({\n            type: GET_PERSONAJES_SUCCESS\n          })\n          dispatch(setPersonajes(data))\n          dispatch(filterPersonajes())\n        })\n        .catch(error => {\n          dispatch({\n            type: GET_PERSONAJES_FAIL,\n            payload: error.message\n          })\n        })\n    }\n  }\n  \n  export function filterPersonajes(searchString = '') {\n    return (dispatch, getState) => {\n      const displayedPersonajes = getState().page.personajes.filter(personaje => {\n        return personaje.name.toLowerCase().includes(searchString.toLowerCase())\n      })\n  \n      dispatch({\n        type: FILTER_PERSONAJE,\n        payload: displayedPersonajes\n      })\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}