"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _global = require("global");

var _jestSpecificSnapshot = require("jest-specific-snapshot");

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function snapshotTest({
  item,
  asyncJest,
  framework,
  testMethod,
  testMethodParams
}) {
  const {
    name
  } = item;
  const context = Object.assign({}, item, {
    framework
  });

  if (asyncJest === true) {
    (0, _global.it)(name, done => testMethod(Object.assign({
      done,
      story: item,
      context
    }, testMethodParams)));
  } else {
    (0, _global.it)(name, () => testMethod(Object.assign({
      story: item,
      context
    }, testMethodParams)));
  }
}

function snapshotTestSuite(_ref) {
  let {
    item,
    suite
  } = _ref,
      restParams = _objectWithoutPropertiesLoose(_ref, ["item", "suite"]);

  const {
    kind,
    children
  } = item; // eslint-disable-next-line jest/valid-describe

  (0, _global.describe)(suite, () => {
    // eslint-disable-next-line jest/valid-describe
    (0, _global.describe)(kind, () => {
      children.forEach(c => {
        snapshotTest(Object.assign({
          item: c
        }, restParams));
      });
    });
  });
}

function snapshotsTests(_ref2) {
  let {
    data,
    snapshotSerializers
  } = _ref2,
      restParams = _objectWithoutPropertiesLoose(_ref2, ["data", "snapshotSerializers"]);

  if (snapshotSerializers) {
    snapshotSerializers.forEach(serializer => {
      (0, _jestSpecificSnapshot.addSerializer)(serializer);
      expect.addSnapshotSerializer(serializer);
    });
  }

  data.forEach(item => {
    snapshotTestSuite(Object.assign({
      item
    }, restParams));
  });
}

var _default = snapshotsTests;
exports.default = _default;